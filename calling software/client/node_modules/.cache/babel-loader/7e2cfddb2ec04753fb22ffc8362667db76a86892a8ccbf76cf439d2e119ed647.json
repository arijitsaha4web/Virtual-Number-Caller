{"ast":null,"code":"\"use strict\";\n\nvar __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n    };\n    return extendStatics(d, b);\n  };\n  return function (d, b) {\n    extendStatics(d, b);\n    function __() {\n      this.constructor = d;\n    }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.UserMediaErrors = exports.TwilioError = exports.SIPServerErrors = exports.SignatureValidationErrors = exports.SignalingErrors = exports.MediaErrors = exports.MalformedRequestErrors = exports.GeneralErrors = exports.ClientErrors = exports.AuthorizationErrors = exports.hasErrorByCode = exports.getErrorByCode = exports.NotSupportedError = exports.InvalidStateError = exports.InvalidArgumentError = exports.getPreciseSignalingErrorByCode = void 0;\n/**\n * @packageDocumentation\n * @internalapi\n */\n/* tslint:disable max-classes-per-file */\nvar generated_1 = require(\"./generated\");\nObject.defineProperty(exports, \"AuthorizationErrors\", {\n  enumerable: true,\n  get: function () {\n    return generated_1.AuthorizationErrors;\n  }\n});\nObject.defineProperty(exports, \"ClientErrors\", {\n  enumerable: true,\n  get: function () {\n    return generated_1.ClientErrors;\n  }\n});\nObject.defineProperty(exports, \"GeneralErrors\", {\n  enumerable: true,\n  get: function () {\n    return generated_1.GeneralErrors;\n  }\n});\nObject.defineProperty(exports, \"MalformedRequestErrors\", {\n  enumerable: true,\n  get: function () {\n    return generated_1.MalformedRequestErrors;\n  }\n});\nObject.defineProperty(exports, \"MediaErrors\", {\n  enumerable: true,\n  get: function () {\n    return generated_1.MediaErrors;\n  }\n});\nObject.defineProperty(exports, \"SignalingErrors\", {\n  enumerable: true,\n  get: function () {\n    return generated_1.SignalingErrors;\n  }\n});\nObject.defineProperty(exports, \"SignatureValidationErrors\", {\n  enumerable: true,\n  get: function () {\n    return generated_1.SignatureValidationErrors;\n  }\n});\nObject.defineProperty(exports, \"SIPServerErrors\", {\n  enumerable: true,\n  get: function () {\n    return generated_1.SIPServerErrors;\n  }\n});\nObject.defineProperty(exports, \"TwilioError\", {\n  enumerable: true,\n  get: function () {\n    return generated_1.TwilioError;\n  }\n});\nObject.defineProperty(exports, \"UserMediaErrors\", {\n  enumerable: true,\n  get: function () {\n    return generated_1.UserMediaErrors;\n  }\n});\n/**\n * NOTE(mhuynh): Replacing generic error codes with new (more specific) codes,\n * is a breaking change. If an error code is found in this set, we only perform\n * the transformation if the feature flag is enabled.\n *\n * With every major version bump, such that we are allowed to introduce breaking\n * changes as per semver specification, this array should be cleared.\n *\n * TODO: [VBLOCKS-2295] Remove this in 3.x\n */\nvar PRECISE_SIGNALING_ERROR_CODES = new Set([\n/**\n * 310XX Errors\n */\n31001, 31002, 31003,\n/**\n * 311XX Errors\n */\n31101, 31102, 31103, 31104, 31105, 31107,\n/**\n * 312XX Errors\n */\n31201, 31202, 31203, 31204, 31205, 31207,\n/**\n * 314XX Errors\n */\n31404, 31480, 31486,\n/**\n * 316XX Errors\n */\n31603]);\nfunction getPreciseSignalingErrorByCode(enableImprovedSignalingErrorPrecision, errorCode) {\n  if (typeof errorCode !== 'number') {\n    return;\n  }\n  if (!hasErrorByCode(errorCode)) {\n    return;\n  }\n  var shouldTransform = enableImprovedSignalingErrorPrecision ? true : !PRECISE_SIGNALING_ERROR_CODES.has(errorCode);\n  if (!shouldTransform) {\n    return;\n  }\n  return getErrorByCode(errorCode);\n}\nexports.getPreciseSignalingErrorByCode = getPreciseSignalingErrorByCode;\n// Application errors that can be avoided by good app logic\nvar InvalidArgumentError = /** @class */function (_super) {\n  __extends(InvalidArgumentError, _super);\n  function InvalidArgumentError(message) {\n    var _this = _super.call(this, message) || this;\n    _this.name = 'InvalidArgumentError';\n    return _this;\n  }\n  return InvalidArgumentError;\n}(Error);\nexports.InvalidArgumentError = InvalidArgumentError;\nvar InvalidStateError = /** @class */function (_super) {\n  __extends(InvalidStateError, _super);\n  function InvalidStateError(message) {\n    var _this = _super.call(this, message) || this;\n    _this.name = 'InvalidStateError';\n    return _this;\n  }\n  return InvalidStateError;\n}(Error);\nexports.InvalidStateError = InvalidStateError;\nvar NotSupportedError = /** @class */function (_super) {\n  __extends(NotSupportedError, _super);\n  function NotSupportedError(message) {\n    var _this = _super.call(this, message) || this;\n    _this.name = 'NotSupportedError';\n    return _this;\n  }\n  return NotSupportedError;\n}(Error);\nexports.NotSupportedError = NotSupportedError;\n// This should only be used to look up error codes returned by a server\n// using the same repo of error codes.\nfunction getErrorByCode(code) {\n  var error = generated_1.errorsByCode.get(code);\n  if (!error) {\n    throw new InvalidArgumentError(\"Error code \" + code + \" not found\");\n  }\n  return error;\n}\nexports.getErrorByCode = getErrorByCode;\n// This should only be used to look up error codes returned by a server\n// using the same repo of error codes.\nfunction hasErrorByCode(code) {\n  return generated_1.errorsByCode.has(code);\n}\nexports.hasErrorByCode = hasErrorByCode;","map":{"version":3,"names":["generated_1","require","Object","defineProperty","exports","enumerable","get","AuthorizationErrors","ClientErrors","GeneralErrors","MalformedRequestErrors","MediaErrors","SignalingErrors","SignatureValidationErrors","SIPServerErrors","TwilioError","UserMediaErrors","PRECISE_SIGNALING_ERROR_CODES","Set","getPreciseSignalingErrorByCode","enableImprovedSignalingErrorPrecision","errorCode","hasErrorByCode","shouldTransform","has","getErrorByCode","InvalidArgumentError","_super","__extends","message","_this","call","name","Error","InvalidStateError","NotSupportedError","code","error","errorsByCode"],"sources":["C:\\Users\\91629\\Desktop\\Delote\\New folder\\calling software\\node_modules\\@twilio\\voice-sdk\\lib\\twilio\\errors\\index.ts"],"sourcesContent":["/**\n * @packageDocumentation\n * @internalapi\n */\n/* tslint:disable max-classes-per-file */\nimport {\n  AuthorizationErrors,\n  ClientErrors,\n  errorsByCode,\n  GeneralErrors,\n  MalformedRequestErrors,\n  MediaErrors,\n  SignalingErrors,\n  SignatureValidationErrors,\n  SIPServerErrors,\n  TwilioError,\n  UserMediaErrors,\n} from './generated';\n\n/**\n * NOTE(mhuynh): Replacing generic error codes with new (more specific) codes,\n * is a breaking change. If an error code is found in this set, we only perform\n * the transformation if the feature flag is enabled.\n *\n * With every major version bump, such that we are allowed to introduce breaking\n * changes as per semver specification, this array should be cleared.\n *\n * TODO: [VBLOCKS-2295] Remove this in 3.x\n */\nconst PRECISE_SIGNALING_ERROR_CODES: Set<number> = new Set([\n  /**\n   * 310XX Errors\n   */\n  31001,\n  31002,\n  31003,\n  /**\n   * 311XX Errors\n   */\n  31101,\n  31102,\n  31103,\n  31104,\n  31105,\n  31107,\n  /**\n   * 312XX Errors\n   */\n  31201,\n  31202,\n  31203,\n  31204,\n  31205,\n  31207,\n  /**\n   * 314XX Errors\n   */\n  31404,\n  31480,\n  31486,\n  /**\n   * 316XX Errors\n   */\n  31603,\n]);\nexport function getPreciseSignalingErrorByCode(\n  enableImprovedSignalingErrorPrecision: boolean,\n  errorCode: number,\n): typeof TwilioError | undefined {\n  if (typeof errorCode !== 'number') {\n    return;\n  }\n\n  if (!hasErrorByCode(errorCode)) {\n    return;\n  }\n\n  const shouldTransform = enableImprovedSignalingErrorPrecision\n    ? true\n    : !PRECISE_SIGNALING_ERROR_CODES.has(errorCode);\n  if (!shouldTransform) {\n    return;\n  }\n\n  return getErrorByCode(errorCode);\n}\n\n// Application errors that can be avoided by good app logic\nexport class InvalidArgumentError extends Error {\n  constructor(message?: string) {\n    super(message);\n    this.name = 'InvalidArgumentError';\n  }\n}\nexport class InvalidStateError extends Error {\n  constructor(message?: string) {\n    super(message);\n    this.name = 'InvalidStateError';\n  }\n}\nexport class NotSupportedError extends Error {\n  constructor(message?: string) {\n    super(message);\n    this.name = 'NotSupportedError';\n  }\n}\n\n// This should only be used to look up error codes returned by a server\n// using the same repo of error codes.\nexport function getErrorByCode(code: number): (typeof TwilioError) {\n  const error: (typeof TwilioError) | undefined = errorsByCode.get(code);\n  if (!error) {\n    throw new InvalidArgumentError(`Error code ${code} not found`);\n  }\n  return error;\n}\n\n// This should only be used to look up error codes returned by a server\n// using the same repo of error codes.\nexport function hasErrorByCode(code: number): boolean {\n  return errorsByCode.has(code);\n}\n\n/**\n * All errors we want to throw or emit locally in the SDK need to be passed\n * through here.\n *\n * They need to first be defined in the `USED_ERRORS` list. See:\n * ```\n * scripts/errors.js\n * ```\n */\nexport {\n  AuthorizationErrors,\n  ClientErrors,\n  GeneralErrors,\n  MalformedRequestErrors,\n  MediaErrors,\n  SignalingErrors,\n  SignatureValidationErrors,\n  SIPServerErrors,\n  TwilioError,\n  UserMediaErrors,\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}