{"ast":null,"code":"\"use strict\";\n\n/**\n * @packageDocumentation\n * @module Voice\n * @internalapi\n */\nvar __spreadArrays = this && this.__spreadArrays || function () {\n  for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\n  for (var r = Array(s), k = 0, i = 0; i < il; i++) for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++) r[k] = a[j];\n  return r;\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Logger = void 0;\nvar LogLevelModule = require(\"loglevel\");\nvar constants_1 = require(\"./constants\");\n/**\n * {@link Log} provides logging features throughout the sdk using loglevel module\n * See https://github.com/pimterry/loglevel for documentation\n * @private\n */\nvar Log = /** @class */function () {\n  /**\n   * @constructor\n   * @param [tag] - tag name for the logs\n   * @param [options] - Optional settings\n   */\n  function Log(tag, options) {\n    this._log = Log.getLogLevelInstance(options);\n    this._prefix = \"[TwilioVoice][\" + tag + \"]\";\n  }\n  /**\n   * Return the `loglevel` instance maintained internally.\n   * @param [options] - Optional settings\n   * @returns The `loglevel` instance.\n   */\n  Log.getLogLevelInstance = function (options) {\n    if (!Log.loglevelInstance) {\n      try {\n        Log.loglevelInstance = (options && options.LogLevelModule ? options.LogLevelModule : LogLevelModule).getLogger(constants_1.PACKAGE_NAME);\n      } catch (_a) {\n        // tslint:disable-next-line\n        console.warn('Cannot create custom logger');\n        Log.loglevelInstance = console;\n      }\n    }\n    return Log.loglevelInstance;\n  };\n  /**\n   * Log a debug message\n   * @param args - Any number of arguments to be passed to loglevel.debug\n   */\n  Log.prototype.debug = function () {\n    var _a;\n    var args = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n      args[_i] = arguments[_i];\n    }\n    (_a = this._log).debug.apply(_a, __spreadArrays([this._prefix], args));\n  };\n  /**\n   * Log an error message\n   * @param args - Any number of arguments to be passed to loglevel.error\n   */\n  Log.prototype.error = function () {\n    var _a;\n    var args = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n      args[_i] = arguments[_i];\n    }\n    (_a = this._log).error.apply(_a, __spreadArrays([this._prefix], args));\n  };\n  /**\n   * Log an info message\n   * @param args - Any number of arguments to be passed to loglevel.info\n   */\n  Log.prototype.info = function () {\n    var _a;\n    var args = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n      args[_i] = arguments[_i];\n    }\n    (_a = this._log).info.apply(_a, __spreadArrays([this._prefix], args));\n  };\n  /**\n   * Set a default log level to disable all logging below the given level\n   */\n  Log.prototype.setDefaultLevel = function (level) {\n    if (this._log.setDefaultLevel) {\n      this._log.setDefaultLevel(level);\n    } else {\n      // tslint:disable-next-line\n      console.warn('Logger cannot setDefaultLevel');\n    }\n  };\n  /**\n   * Log a warning message\n   * @param args - Any number of arguments to be passed to loglevel.warn\n   */\n  Log.prototype.warn = function () {\n    var _a;\n    var args = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n      args[_i] = arguments[_i];\n    }\n    (_a = this._log).warn.apply(_a, __spreadArrays([this._prefix], args));\n  };\n  /**\n   * Log levels\n   */\n  Log.levels = LogLevelModule.levels;\n  return Log;\n}();\nexports.Logger = Log.getLogLevelInstance();\nexports.default = Log;","map":{"version":3,"names":["LogLevelModule","require","constants_1","Log","tag","options","_log","getLogLevelInstance","_prefix","loglevelInstance","getLogger","PACKAGE_NAME","_a","console","warn","prototype","debug","args","_i","arguments","length","apply","__spreadArrays","error","info","setDefaultLevel","level","levels","exports","Logger","default"],"sources":["C:\\Users\\91629\\Desktop\\Delote\\New folder\\calling software\\node_modules\\@twilio\\voice-sdk\\lib\\twilio\\log.ts"],"sourcesContent":["/**\n * @packageDocumentation\n * @module Voice\n * @internalapi\n */\n\nimport * as LogLevelModule from 'loglevel';\nimport { PACKAGE_NAME } from './constants';\n\n/**\n * Options that may be passed to the {@link Log} constructor for internal testing.\n * @private\n */\nexport interface LogOptions {\n  /**\n   * Custom loglevel module\n   */\n  LogLevelModule: any;\n}\n\n/**\n * {@link Log} provides logging features throughout the sdk using loglevel module\n * See https://github.com/pimterry/loglevel for documentation\n * @private\n */\nclass Log {\n  /**\n   * Log levels\n   */\n  static levels: LogLevelModule.LogLevel = LogLevelModule.levels;\n\n  /**\n   * Return the `loglevel` instance maintained internally.\n   * @param [options] - Optional settings\n   * @returns The `loglevel` instance.\n   */\n  static getLogLevelInstance(options?: LogOptions): LogLevelModule.Logger {\n    if (!Log.loglevelInstance) {\n      try {\n        Log.loglevelInstance = (options && options.LogLevelModule ? options.LogLevelModule : LogLevelModule).getLogger(PACKAGE_NAME);\n      } catch {\n        // tslint:disable-next-line\n        console.warn('Cannot create custom logger');\n        Log.loglevelInstance = console as any;\n      }\n    }\n    return Log.loglevelInstance;\n  }\n\n  /**\n   * The loglevel singleton instance\n   */\n  private static loglevelInstance: LogLevelModule.Logger;\n\n  /**\n   * The loglevel logger instance that will be used in this {@link Log}\n   */\n  private _log: LogLevelModule.Logger;\n\n  /**\n   * Prefix to use for this log instance\n   */\n  private _prefix: string;\n\n  /**\n   * @constructor\n   * @param [tag] - tag name for the logs\n   * @param [options] - Optional settings\n   */\n  constructor(tag: string, options?: LogOptions) {\n    this._log = Log.getLogLevelInstance(options);\n    this._prefix = `[TwilioVoice][${tag}]`;\n  }\n\n  /**\n   * Log a debug message\n   * @param args - Any number of arguments to be passed to loglevel.debug\n   */\n  debug(...args: any[]): void {\n    this._log.debug(this._prefix, ...args);\n  }\n\n  /**\n   * Log an error message\n   * @param args - Any number of arguments to be passed to loglevel.error\n   */\n  error(...args: any[]): void {\n    this._log.error(this._prefix, ...args);\n  }\n\n  /**\n   * Log an info message\n   * @param args - Any number of arguments to be passed to loglevel.info\n   */\n  info(...args: any[]): void {\n    this._log.info(this._prefix, ...args);\n  }\n\n  /**\n   * Set a default log level to disable all logging below the given level\n   */\n  setDefaultLevel(level: LogLevelModule.LogLevelDesc): void {\n    if (this._log.setDefaultLevel) {\n      this._log.setDefaultLevel(level);\n    } else {\n      // tslint:disable-next-line\n      console.warn('Logger cannot setDefaultLevel');\n    }\n  }\n\n  /**\n   * Log a warning message\n   * @param args - Any number of arguments to be passed to loglevel.warn\n   */\n  warn(...args: any[]): void {\n    this._log.warn(this._prefix, ...args);\n  }\n}\n\nexport const Logger = Log.getLogLevelInstance();\n\nexport default Log;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}