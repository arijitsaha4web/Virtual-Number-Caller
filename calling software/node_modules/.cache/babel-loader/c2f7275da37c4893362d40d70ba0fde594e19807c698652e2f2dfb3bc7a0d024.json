{"ast":null,"code":"\"use strict\";\n\nvar __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n    };\n    return extendStatics(d, b);\n  };\n  return function (d, b) {\n    extendStatics(d, b);\n    function __() {\n      this.constructor = d;\n    }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n/**\n * @packageDocumentation\n * @module Voice\n * @internalapi\n */\n// @ts-nocheck\nvar events_1 = require(\"events\");\nvar C = require(\"./constants\");\nvar errors_1 = require(\"./errors\");\nvar log_1 = require(\"./log\");\nvar wstransport_1 = require(\"./wstransport\");\nvar PSTREAM_VERSION = '1.6';\n// In seconds\nvar MAX_RECONNECT_TIMEOUT_ALLOWED = 30;\n/**\n * Constructor for PStream objects.\n *\n * @exports PStream as Twilio.PStream\n * @memberOf Twilio\n * @borrows EventEmitter#addListener as #addListener\n * @borrows EventEmitter#removeListener as #removeListener\n * @borrows EventEmitter#emit as #emit\n * @borrows EventEmitter#hasListener as #hasListener\n * @constructor\n * @param {string} token The Twilio capabilities JWT\n * @param {string[]} uris An array of PStream endpoint URIs\n * @param {object} [options]\n * @config {boolean} [options.backoffMaxMs=20000] Enable debugging\n */\nvar PStream = /** @class */function (_super) {\n  __extends(PStream, _super);\n  function PStream(token, uris, options) {\n    var _this = _super.call(this) || this;\n    if (!(_this instanceof PStream)) {\n      return new PStream(token, uris, options);\n    }\n    var defaults = {\n      TransportFactory: wstransport_1.default\n    };\n    options = options || {};\n    for (var prop in defaults) {\n      if (prop in options) {\n        continue;\n      }\n      options[prop] = defaults[prop];\n    }\n    _this.options = options;\n    _this.token = token || '';\n    _this.status = 'disconnected';\n    _this.gateway = null;\n    _this.region = null;\n    _this._messageQueue = [];\n    _this._preferredUri = null;\n    _this._uris = uris;\n    _this._handleTransportClose = _this._handleTransportClose.bind(_this);\n    _this._handleTransportError = _this._handleTransportError.bind(_this);\n    _this._handleTransportMessage = _this._handleTransportMessage.bind(_this);\n    _this._handleTransportOpen = _this._handleTransportOpen.bind(_this);\n    _this._log = new log_1.default('PStream');\n    // NOTE(mroberts): EventEmitter requires that we catch all errors.\n    _this.on('error', function () {\n      _this._log.warn('Unexpected error handled in pstream');\n    });\n    /*\n     *events used by device\n     *'invite',\n     *'ready',\n     *'error',\n     *'offline',\n     *\n     *'cancel',\n     *'presence',\n     *'roster',\n     *'answer',\n     *'candidate',\n     *'hangup'\n     */\n    var self = _this;\n    _this.addListener('ready', function () {\n      self.status = 'ready';\n    });\n    _this.addListener('offline', function () {\n      self.status = 'offline';\n    });\n    _this.addListener('close', function () {\n      self._log.info('Received \"close\" from server. Destroying PStream...');\n      self._destroy();\n    });\n    _this.transport = new _this.options.TransportFactory(_this._uris, {\n      backoffMaxMs: _this.options.backoffMaxMs,\n      maxPreferredDurationMs: _this.options.maxPreferredDurationMs\n    });\n    Object.defineProperties(_this, {\n      uri: {\n        enumerable: true,\n        get: function () {\n          return this.transport.uri;\n        }\n      }\n    });\n    _this.transport.on('close', _this._handleTransportClose);\n    _this.transport.on('error', _this._handleTransportError);\n    _this.transport.on('message', _this._handleTransportMessage);\n    _this.transport.on('open', _this._handleTransportOpen);\n    _this.transport.open();\n    return _this;\n  }\n  return PStream;\n}(events_1.EventEmitter);\nPStream.prototype._handleTransportClose = function () {\n  this.emit('transportClose');\n  if (this.status !== 'disconnected') {\n    if (this.status !== 'offline') {\n      this.emit('offline', this);\n    }\n    this.status = 'disconnected';\n  }\n};\nPStream.prototype._handleTransportError = function (error) {\n  if (!error) {\n    this.emit('error', {\n      error: {\n        code: 31000,\n        message: 'Websocket closed without a provided reason',\n        twilioError: new errors_1.SignalingErrors.ConnectionDisconnected()\n      }\n    });\n    return;\n  }\n  // We receive some errors without call metadata (just the error). We need to convert these\n  // to be contained within the 'error' field so that these errors match the expected format.\n  this.emit('error', typeof error.code !== 'undefined' ? {\n    error: error\n  } : error);\n};\nPStream.prototype._handleTransportMessage = function (msg) {\n  if (!msg || !msg.data || typeof msg.data !== 'string') {\n    return;\n  }\n  var _a = JSON.parse(msg.data),\n    type = _a.type,\n    _b = _a.payload,\n    payload = _b === void 0 ? {} : _b;\n  this.gateway = payload.gateway || this.gateway;\n  this.region = payload.region || this.region;\n  if (type === 'error' && payload.error) {\n    payload.error.twilioError = new errors_1.SignalingErrors.ConnectionError();\n  }\n  this.emit(type, payload);\n};\nPStream.prototype._handleTransportOpen = function () {\n  var _this = this;\n  this.status = 'connected';\n  this.setToken(this.token);\n  this.emit('transportOpen');\n  var messages = this._messageQueue.splice(0, this._messageQueue.length);\n  messages.forEach(function (message) {\n    return _this._publish.apply(_this, message);\n  });\n};\n/**\n * @return {string}\n */\nPStream.toString = function () {\n  return '[Twilio.PStream class]';\n};\nPStream.prototype.toString = function () {\n  return '[Twilio.PStream instance]';\n};\nPStream.prototype.setToken = function (token) {\n  this._log.info('Setting token and publishing listen');\n  this.token = token;\n  var reconnectTimeout = 0;\n  var t = this.options.maxPreferredDurationMs;\n  this._log.info(\"maxPreferredDurationMs:\" + t);\n  if (typeof t === 'number' && t >= 0) {\n    reconnectTimeout = Math.min(Math.ceil(t / 1000), MAX_RECONNECT_TIMEOUT_ALLOWED);\n  }\n  this._log.info(\"reconnectTimeout:\" + reconnectTimeout);\n  var payload = {\n    browserinfo: getBrowserInfo(),\n    reconnectTimeout: reconnectTimeout,\n    token: token\n  };\n  this._publish('listen', payload);\n};\nPStream.prototype.sendMessage = function (callsid, content, contenttype, messagetype, voiceeventsid) {\n  if (contenttype === void 0) {\n    contenttype = 'application/json';\n  }\n  var payload = {\n    callsid: callsid,\n    content: content,\n    contenttype: contenttype,\n    messagetype: messagetype,\n    voiceeventsid: voiceeventsid\n  };\n  this._publish('message', payload, true);\n};\nPStream.prototype.register = function (mediaCapabilities) {\n  var regPayload = {\n    media: mediaCapabilities\n  };\n  this._publish('register', regPayload, true);\n};\nPStream.prototype.invite = function (sdp, callsid, params) {\n  var payload = {\n    callsid: callsid,\n    sdp: sdp,\n    twilio: params ? {\n      params: params\n    } : {}\n  };\n  this._publish('invite', payload, true);\n};\nPStream.prototype.reconnect = function (sdp, callsid, reconnect) {\n  var payload = {\n    callsid: callsid,\n    reconnect: reconnect,\n    sdp: sdp,\n    twilio: {}\n  };\n  this._publish('invite', payload, true);\n};\nPStream.prototype.answer = function (sdp, callsid) {\n  this._publish('answer', {\n    sdp: sdp,\n    callsid: callsid\n  }, true);\n};\nPStream.prototype.dtmf = function (callsid, digits) {\n  this._publish('dtmf', {\n    callsid: callsid,\n    dtmf: digits\n  }, true);\n};\nPStream.prototype.hangup = function (callsid, message) {\n  var payload = message ? {\n    callsid: callsid,\n    message: message\n  } : {\n    callsid: callsid\n  };\n  this._publish('hangup', payload, true);\n};\nPStream.prototype.reject = function (callsid) {\n  this._publish('reject', {\n    callsid: callsid\n  }, true);\n};\nPStream.prototype.reinvite = function (sdp, callsid) {\n  this._publish('reinvite', {\n    sdp: sdp,\n    callsid: callsid\n  }, false);\n};\nPStream.prototype._destroy = function () {\n  this.transport.removeListener('close', this._handleTransportClose);\n  this.transport.removeListener('error', this._handleTransportError);\n  this.transport.removeListener('message', this._handleTransportMessage);\n  this.transport.removeListener('open', this._handleTransportOpen);\n  this.transport.close();\n  this.emit('offline', this);\n};\nPStream.prototype.destroy = function () {\n  this._log.info('PStream.destroy() called...');\n  this._destroy();\n  return this;\n};\nPStream.prototype.updatePreferredURI = function (uri) {\n  this._preferredUri = uri;\n  this.transport.updatePreferredURI(uri);\n};\nPStream.prototype.updateURIs = function (uris) {\n  this._uris = uris;\n  this.transport.updateURIs(this._uris);\n};\nPStream.prototype.publish = function (type, payload) {\n  return this._publish(type, payload, true);\n};\nPStream.prototype._publish = function (type, payload, shouldRetry) {\n  var msg = JSON.stringify({\n    payload: payload,\n    type: type,\n    version: PSTREAM_VERSION\n  });\n  var isSent = !!this.transport.send(msg);\n  if (!isSent) {\n    this.emit('error', {\n      error: {\n        code: 31009,\n        message: 'No transport available to send or receive messages',\n        twilioError: new errors_1.GeneralErrors.TransportError()\n      }\n    });\n    if (shouldRetry) {\n      this._messageQueue.push([type, payload, true]);\n    }\n  }\n};\nfunction getBrowserInfo() {\n  var nav = typeof navigator !== 'undefined' ? navigator : {};\n  var info = {\n    browser: {\n      platform: nav.platform || 'unknown',\n      userAgent: nav.userAgent || 'unknown'\n    },\n    p: 'browser',\n    plugin: 'rtc',\n    v: C.RELEASE_VERSION\n  };\n  return info;\n}\nexports.default = PStream;","map":{"version":3,"names":["events_1","require","C","errors_1","log_1","wstransport_1","PSTREAM_VERSION","MAX_RECONNECT_TIMEOUT_ALLOWED","PStream","_super","__extends","token","uris","options","_this","call","defaults","TransportFactory","default","prop","status","gateway","region","_messageQueue","_preferredUri","_uris","_handleTransportClose","bind","_handleTransportError","_handleTransportMessage","_handleTransportOpen","_log","on","warn","self","addListener","info","_destroy","transport","backoffMaxMs","maxPreferredDurationMs","Object","defineProperties","uri","enumerable","get","open","EventEmitter","prototype","emit","error","code","message","twilioError","SignalingErrors","ConnectionDisconnected","msg","data","_a","JSON","parse","type","_b","payload","ConnectionError","setToken","messages","splice","length","forEach","_publish","apply","toString","reconnectTimeout","t","Math","min","ceil","browserinfo","getBrowserInfo","sendMessage","callsid","content","contenttype","messagetype","voiceeventsid","register","mediaCapabilities","regPayload","media","invite","sdp","params","twilio","reconnect","answer","dtmf","digits","hangup","reject","reinvite","removeListener","close","destroy","updatePreferredURI","updateURIs","publish","shouldRetry","stringify","version","isSent","send","GeneralErrors","TransportError","push","nav","navigator","browser","platform","userAgent","p","plugin","v","RELEASE_VERSION","exports"],"sources":["C:\\Users\\91629\\Desktop\\Delote\\calling software\\node_modules\\@twilio\\voice-sdk\\lib\\twilio\\pstream.ts"],"sourcesContent":["/**\n * @packageDocumentation\n * @module Voice\n * @internalapi\n */\n// @ts-nocheck\nimport { EventEmitter } from 'events';\nimport * as C from './constants';\nimport { GeneralErrors, SignalingErrors } from './errors';\nimport Log from './log';\nimport WSTransport from './wstransport';\n\nconst PSTREAM_VERSION = '1.6';\n\n// In seconds\nconst MAX_RECONNECT_TIMEOUT_ALLOWED = 30;\n\n/**\n * Constructor for PStream objects.\n *\n * @exports PStream as Twilio.PStream\n * @memberOf Twilio\n * @borrows EventEmitter#addListener as #addListener\n * @borrows EventEmitter#removeListener as #removeListener\n * @borrows EventEmitter#emit as #emit\n * @borrows EventEmitter#hasListener as #hasListener\n * @constructor\n * @param {string} token The Twilio capabilities JWT\n * @param {string[]} uris An array of PStream endpoint URIs\n * @param {object} [options]\n * @config {boolean} [options.backoffMaxMs=20000] Enable debugging\n */\nclass PStream extends EventEmitter {\n  constructor(token, uris, options) {\n    super();\n\n    if (!(this instanceof PStream)) {\n      return new PStream(token, uris, options);\n    }\n    const defaults = {\n      TransportFactory: WSTransport,\n    };\n    options = options || {};\n    for (const prop in defaults) {\n      if (prop in options) {\n        continue;\n      }\n      options[prop] = defaults[prop];\n    }\n    this.options = options;\n    this.token = token || '';\n    this.status = 'disconnected';\n    this.gateway = null;\n    this.region = null;\n    this._messageQueue = [];\n    this._preferredUri = null;\n    this._uris = uris;\n\n    this._handleTransportClose = this._handleTransportClose.bind(this);\n    this._handleTransportError = this._handleTransportError.bind(this);\n    this._handleTransportMessage = this._handleTransportMessage.bind(this);\n    this._handleTransportOpen = this._handleTransportOpen.bind(this);\n\n    this._log = new Log('PStream');\n\n    // NOTE(mroberts): EventEmitter requires that we catch all errors.\n    this.on('error', () => {\n      this._log.warn('Unexpected error handled in pstream');\n    });\n\n    /*\n     *events used by device\n     *'invite',\n     *'ready',\n     *'error',\n     *'offline',\n     *\n     *'cancel',\n     *'presence',\n     *'roster',\n     *'answer',\n     *'candidate',\n     *'hangup'\n     */\n\n    const self = this;\n\n    this.addListener('ready', () => {\n      self.status = 'ready';\n    });\n\n    this.addListener('offline', () => {\n      self.status = 'offline';\n    });\n\n    this.addListener('close', () => {\n      self._log.info('Received \"close\" from server. Destroying PStream...');\n      self._destroy();\n    });\n\n    this.transport = new this.options.TransportFactory(this._uris, {\n      backoffMaxMs: this.options.backoffMaxMs,\n      maxPreferredDurationMs: this.options.maxPreferredDurationMs,\n    });\n\n    Object.defineProperties(this, {\n      uri: {\n        enumerable: true,\n        get() {\n          return this.transport.uri;\n        },\n      },\n    });\n\n    this.transport.on('close', this._handleTransportClose);\n    this.transport.on('error', this._handleTransportError);\n    this.transport.on('message', this._handleTransportMessage);\n    this.transport.on('open', this._handleTransportOpen);\n    this.transport.open();\n\n    return this;\n  }\n}\n\nPStream.prototype._handleTransportClose = function() {\n  this.emit('transportClose');\n\n  if (this.status !== 'disconnected') {\n    if (this.status !== 'offline') {\n      this.emit('offline', this);\n    }\n    this.status = 'disconnected';\n  }\n};\n\nPStream.prototype._handleTransportError = function(error) {\n  if (!error) {\n    this.emit('error', { error: {\n      code: 31000,\n      message: 'Websocket closed without a provided reason',\n      twilioError: new SignalingErrors.ConnectionDisconnected(),\n    } });\n    return;\n  }\n  // We receive some errors without call metadata (just the error). We need to convert these\n  // to be contained within the 'error' field so that these errors match the expected format.\n  this.emit('error', typeof error.code !== 'undefined' ?  { error } : error);\n};\n\nPStream.prototype._handleTransportMessage = function(msg) {\n  if (!msg || !msg.data || typeof msg.data !== 'string') {\n    return;\n  }\n\n  const { type, payload = {} } = JSON.parse(msg.data);\n  this.gateway = payload.gateway || this.gateway;\n  this.region = payload.region || this.region;\n\n  if (type === 'error' && payload.error) {\n    payload.error.twilioError = new SignalingErrors.ConnectionError();\n  }\n\n  this.emit(type, payload);\n};\n\nPStream.prototype._handleTransportOpen = function() {\n  this.status = 'connected';\n  this.setToken(this.token);\n\n  this.emit('transportOpen');\n\n  const messages = this._messageQueue.splice(0, this._messageQueue.length);\n  messages.forEach(message => this._publish(...message));\n};\n\n/**\n * @return {string}\n */\nPStream.toString = () => '[Twilio.PStream class]';\nPStream.prototype.toString = () => '[Twilio.PStream instance]';\n\nPStream.prototype.setToken = function(token) {\n  this._log.info('Setting token and publishing listen');\n  this.token = token;\n\n  let reconnectTimeout = 0;\n  const t = this.options.maxPreferredDurationMs;\n  this._log.info(`maxPreferredDurationMs:${t}`);\n  if (typeof t === 'number' && t >= 0) {\n    reconnectTimeout = Math.min(Math.ceil(t / 1000), MAX_RECONNECT_TIMEOUT_ALLOWED);\n  }\n\n  this._log.info(`reconnectTimeout:${reconnectTimeout}`);\n  const payload = {\n    browserinfo: getBrowserInfo(),\n    reconnectTimeout,\n    token,\n  };\n\n  this._publish('listen', payload);\n};\n\nPStream.prototype.sendMessage = function(\n  callsid,\n  content,\n  contenttype = 'application/json',\n  messagetype,\n  voiceeventsid,\n) {\n  const payload = {\n    callsid,\n    content,\n    contenttype,\n    messagetype,\n    voiceeventsid,\n  };\n  this._publish('message', payload, true);\n};\n\nPStream.prototype.register = function(mediaCapabilities) {\n  const regPayload = { media: mediaCapabilities };\n  this._publish('register', regPayload, true);\n};\n\nPStream.prototype.invite = function(sdp, callsid, params) {\n  const payload = {\n    callsid,\n    sdp,\n    twilio: params ? { params } : {},\n  };\n  this._publish('invite', payload, true);\n};\n\nPStream.prototype.reconnect = function(sdp, callsid, reconnect) {\n  const payload = {\n    callsid,\n    reconnect,\n    sdp,\n    twilio: {},\n  };\n  this._publish('invite', payload, true);\n};\n\nPStream.prototype.answer = function(sdp, callsid) {\n  this._publish('answer', { sdp, callsid }, true);\n};\n\nPStream.prototype.dtmf = function(callsid, digits) {\n  this._publish('dtmf', { callsid, dtmf: digits }, true);\n};\n\nPStream.prototype.hangup = function(callsid, message) {\n  const payload = message ? { callsid, message } : { callsid };\n  this._publish('hangup', payload, true);\n};\n\nPStream.prototype.reject = function(callsid) {\n  this._publish('reject', { callsid }, true);\n};\n\nPStream.prototype.reinvite = function(sdp, callsid) {\n  this._publish('reinvite', { sdp, callsid }, false);\n};\n\nPStream.prototype._destroy = function() {\n  this.transport.removeListener('close', this._handleTransportClose);\n  this.transport.removeListener('error', this._handleTransportError);\n  this.transport.removeListener('message', this._handleTransportMessage);\n  this.transport.removeListener('open', this._handleTransportOpen);\n  this.transport.close();\n\n  this.emit('offline', this);\n};\n\nPStream.prototype.destroy = function() {\n  this._log.info('PStream.destroy() called...');\n  this._destroy();\n  return this;\n};\n\nPStream.prototype.updatePreferredURI = function(uri) {\n  this._preferredUri = uri;\n  this.transport.updatePreferredURI(uri);\n};\n\nPStream.prototype.updateURIs = function(uris) {\n  this._uris = uris;\n  this.transport.updateURIs(this._uris);\n};\n\nPStream.prototype.publish = function(type, payload) {\n  return this._publish(type, payload, true);\n};\n\nPStream.prototype._publish = function(type, payload, shouldRetry) {\n  const msg = JSON.stringify({\n    payload,\n    type,\n    version: PSTREAM_VERSION,\n  });\n  const isSent = !!this.transport.send(msg);\n\n  if (!isSent) {\n    this.emit('error', { error: {\n      code: 31009,\n      message: 'No transport available to send or receive messages',\n      twilioError: new GeneralErrors.TransportError(),\n    } });\n\n    if (shouldRetry) {\n      this._messageQueue.push([type, payload, true]);\n    }\n  }\n};\n\nfunction getBrowserInfo() {\n  const nav = typeof navigator !== 'undefined' ? navigator : {};\n\n  const info = {\n    browser: {\n      platform: nav.platform || 'unknown',\n      userAgent: nav.userAgent || 'unknown',\n    },\n    p: 'browser',\n    plugin: 'rtc',\n    v: C.RELEASE_VERSION,\n  };\n\n  return info;\n}\n\nexport default PStream;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}